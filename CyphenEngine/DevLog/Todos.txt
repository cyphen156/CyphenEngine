## 해야 할 일 기술

1. Time Class
-> 멀티 스레드로 분기 가능성 고려

2. File Class 
-> 반드시 멀티 스레드로 분기 & 동기/비동기 분할 제공
--> 멀티스레드는 FileSystem OR Resource클래스를 만들어서 제공할 예정
----> 기본적인 파일 입출력은 해결했음
----> 파일 중간에 데이터 추가하는 기능 구현 필요(추후 확장)

==> 파일 확장자 유형을 따로 받아서 처리할 수 있도록 구현하기

3. Logger Class 
-> 메인스레드 or 로그 메세지 큐 스레드 분기 처리
--> 디버그용 윈도우 만들면 거기에 텍스트 렌더링할 예정
---> 플랫폼 분기도 처리해라

4. 렌더러 구현하기
-> 플랫폼별 렌더러 구현
--> OpenGL, DirectX, Vulkan 등

	4_1 유저는 렌더러를 런처 실행시 선택할 수 있음
	=> 렌더러 변경시 런처를 재시작해야 함

	4_2 빌드 시점에 렌더러를 선택할 수 있도록 구현
	=> 작업 결과물이 렌더러에 종속적이므로

	4_3 필연적으로 실행 파일이 많아짐
	
		해결방법은?
	
		=> 4_3_1. 렌더러 모듈들을 전부 집어넣고 분기문을 통해 선택적으로 런타임중에 모듈 로드하기
		(매크로 사용 불가능)
		==> 래퍼 클래스가 필요할 듯

		=> 4_3_2. 외부 런처 사용 및 RHI별로 별도 실행파일 빌드
		매크로가 래퍼 클래스를 대체함
		But, 매크로를 사용하면 플랫폼별로 빌드가 달라지므로 실행 파일이 많아짐

*****결정 사항*****
**렌더러는 모듈(DLL)**로 구성
매크로 기반 빌드로 최적화 가능하게 설계
실행 파일 수는 늘어나지만, 성능 및 구조적 이점이 더 큼